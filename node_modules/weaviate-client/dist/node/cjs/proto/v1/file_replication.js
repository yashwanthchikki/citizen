"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.19.1
// source: v1/file_replication.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileReplicationServiceDefinition = exports.FileChunk = exports.GetFileRequest = exports.FileMetadata = exports.GetFileMetadataRequest = exports.ListFilesResponse = exports.ListFilesRequest = exports.ResumeFileActivityResponse = exports.ResumeFileActivityRequest = exports.PauseFileActivityResponse = exports.PauseFileActivityRequest = exports.compressionTypeToJSON = exports.compressionTypeFromJSON = exports.CompressionType = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_js_1 = __importDefault(require("protobufjs/minimal.js"));
exports.protobufPackage = "weaviate.v1";
var CompressionType;
(function (CompressionType) {
    /** COMPRESSION_TYPE_UNSPECIFIED - No compression */
    CompressionType[CompressionType["COMPRESSION_TYPE_UNSPECIFIED"] = 0] = "COMPRESSION_TYPE_UNSPECIFIED";
    /** COMPRESSION_TYPE_GZIP - gzip (compress/gzip) */
    CompressionType[CompressionType["COMPRESSION_TYPE_GZIP"] = 1] = "COMPRESSION_TYPE_GZIP";
    /** COMPRESSION_TYPE_ZLIB - zlib (compress/zlib) */
    CompressionType[CompressionType["COMPRESSION_TYPE_ZLIB"] = 2] = "COMPRESSION_TYPE_ZLIB";
    /** COMPRESSION_TYPE_DEFLATE - raw DEFLATE (compress/flate) */
    CompressionType[CompressionType["COMPRESSION_TYPE_DEFLATE"] = 3] = "COMPRESSION_TYPE_DEFLATE";
    CompressionType[CompressionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CompressionType || (exports.CompressionType = CompressionType = {}));
function compressionTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "COMPRESSION_TYPE_UNSPECIFIED":
            return CompressionType.COMPRESSION_TYPE_UNSPECIFIED;
        case 1:
        case "COMPRESSION_TYPE_GZIP":
            return CompressionType.COMPRESSION_TYPE_GZIP;
        case 2:
        case "COMPRESSION_TYPE_ZLIB":
            return CompressionType.COMPRESSION_TYPE_ZLIB;
        case 3:
        case "COMPRESSION_TYPE_DEFLATE":
            return CompressionType.COMPRESSION_TYPE_DEFLATE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return CompressionType.UNRECOGNIZED;
    }
}
exports.compressionTypeFromJSON = compressionTypeFromJSON;
function compressionTypeToJSON(object) {
    switch (object) {
        case CompressionType.COMPRESSION_TYPE_UNSPECIFIED:
            return "COMPRESSION_TYPE_UNSPECIFIED";
        case CompressionType.COMPRESSION_TYPE_GZIP:
            return "COMPRESSION_TYPE_GZIP";
        case CompressionType.COMPRESSION_TYPE_ZLIB:
            return "COMPRESSION_TYPE_ZLIB";
        case CompressionType.COMPRESSION_TYPE_DEFLATE:
            return "COMPRESSION_TYPE_DEFLATE";
        case CompressionType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.compressionTypeToJSON = compressionTypeToJSON;
function createBasePauseFileActivityRequest() {
    return { indexName: "", shardName: "", schemaVersion: 0 };
}
exports.PauseFileActivityRequest = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        if (message.schemaVersion !== 0) {
            writer.uint32(24).uint64(message.schemaVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePauseFileActivityRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.schemaVersion = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
            schemaVersion: isSet(object.schemaVersion) ? globalThis.Number(object.schemaVersion) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        if (message.schemaVersion !== 0) {
            obj.schemaVersion = Math.round(message.schemaVersion);
        }
        return obj;
    },
    create(base) {
        return exports.PauseFileActivityRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePauseFileActivityRequest();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        message.schemaVersion = (_c = object.schemaVersion) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBasePauseFileActivityResponse() {
    return { indexName: "", shardName: "" };
}
exports.PauseFileActivityResponse = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePauseFileActivityResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        return obj;
    },
    create(base) {
        return exports.PauseFileActivityResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePauseFileActivityResponse();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseResumeFileActivityRequest() {
    return { indexName: "", shardName: "" };
}
exports.ResumeFileActivityRequest = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResumeFileActivityRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        return obj;
    },
    create(base) {
        return exports.ResumeFileActivityRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseResumeFileActivityRequest();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseResumeFileActivityResponse() {
    return { indexName: "", shardName: "" };
}
exports.ResumeFileActivityResponse = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResumeFileActivityResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        return obj;
    },
    create(base) {
        return exports.ResumeFileActivityResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseResumeFileActivityResponse();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseListFilesRequest() {
    return { indexName: "", shardName: "" };
}
exports.ListFilesRequest = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFilesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        return obj;
    },
    create(base) {
        return exports.ListFilesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListFilesRequest();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseListFilesResponse() {
    return { indexName: "", shardName: "", fileNames: [] };
}
exports.ListFilesResponse = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        for (const v of message.fileNames) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFilesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fileNames.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
            fileNames: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.fileNames)
                ? object.fileNames.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        if ((_a = message.fileNames) === null || _a === void 0 ? void 0 : _a.length) {
            obj.fileNames = message.fileNames;
        }
        return obj;
    },
    create(base) {
        return exports.ListFilesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseListFilesResponse();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        message.fileNames = ((_c = object.fileNames) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function createBaseGetFileMetadataRequest() {
    return { indexName: "", shardName: "", fileName: "" };
}
exports.GetFileMetadataRequest = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        if (message.fileName !== "") {
            writer.uint32(26).string(message.fileName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFileMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
            fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        if (message.fileName !== "") {
            obj.fileName = message.fileName;
        }
        return obj;
    },
    create(base) {
        return exports.GetFileMetadataRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetFileMetadataRequest();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        message.fileName = (_c = object.fileName) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseFileMetadata() {
    return { indexName: "", shardName: "", fileName: "", size: 0, crc32: 0 };
}
exports.FileMetadata = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        if (message.fileName !== "") {
            writer.uint32(26).string(message.fileName);
        }
        if (message.size !== 0) {
            writer.uint32(32).int64(message.size);
        }
        if (message.crc32 !== 0) {
            writer.uint32(40).uint32(message.crc32);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.size = longToNumber(reader.int64());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.crc32 = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
            fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
            size: isSet(object.size) ? globalThis.Number(object.size) : 0,
            crc32: isSet(object.crc32) ? globalThis.Number(object.crc32) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        if (message.fileName !== "") {
            obj.fileName = message.fileName;
        }
        if (message.size !== 0) {
            obj.size = Math.round(message.size);
        }
        if (message.crc32 !== 0) {
            obj.crc32 = Math.round(message.crc32);
        }
        return obj;
    },
    create(base) {
        return exports.FileMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseFileMetadata();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        message.fileName = (_c = object.fileName) !== null && _c !== void 0 ? _c : "";
        message.size = (_d = object.size) !== null && _d !== void 0 ? _d : 0;
        message.crc32 = (_e = object.crc32) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseGetFileRequest() {
    return { indexName: "", shardName: "", fileName: "", compression: 0 };
}
exports.GetFileRequest = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.indexName !== "") {
            writer.uint32(10).string(message.indexName);
        }
        if (message.shardName !== "") {
            writer.uint32(18).string(message.shardName);
        }
        if (message.fileName !== "") {
            writer.uint32(26).string(message.fileName);
        }
        if (message.compression !== 0) {
            writer.uint32(32).int32(message.compression);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.indexName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.shardName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.compression = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            indexName: isSet(object.indexName) ? globalThis.String(object.indexName) : "",
            shardName: isSet(object.shardName) ? globalThis.String(object.shardName) : "",
            fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
            compression: isSet(object.compression) ? compressionTypeFromJSON(object.compression) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.indexName !== "") {
            obj.indexName = message.indexName;
        }
        if (message.shardName !== "") {
            obj.shardName = message.shardName;
        }
        if (message.fileName !== "") {
            obj.fileName = message.fileName;
        }
        if (message.compression !== 0) {
            obj.compression = compressionTypeToJSON(message.compression);
        }
        return obj;
    },
    create(base) {
        return exports.GetFileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseGetFileRequest();
        message.indexName = (_a = object.indexName) !== null && _a !== void 0 ? _a : "";
        message.shardName = (_b = object.shardName) !== null && _b !== void 0 ? _b : "";
        message.fileName = (_c = object.fileName) !== null && _c !== void 0 ? _c : "";
        message.compression = (_d = object.compression) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseFileChunk() {
    return { offset: 0, data: new Uint8Array(0), eof: false };
}
exports.FileChunk = {
    encode(message, writer = minimal_js_1.default.Writer.create()) {
        if (message.offset !== 0) {
            writer.uint32(8).int64(message.offset);
        }
        if (message.data.length !== 0) {
            writer.uint32(18).bytes(message.data);
        }
        if (message.eof !== false) {
            writer.uint32(24).bool(message.eof);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_js_1.default.Reader ? input : minimal_js_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileChunk();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.offset = longToNumber(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.eof = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
            data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
            eof: isSet(object.eof) ? globalThis.Boolean(object.eof) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.offset !== 0) {
            obj.offset = Math.round(message.offset);
        }
        if (message.data.length !== 0) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.eof !== false) {
            obj.eof = message.eof;
        }
        return obj;
    },
    create(base) {
        return exports.FileChunk.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFileChunk();
        message.offset = (_a = object.offset) !== null && _a !== void 0 ? _a : 0;
        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.eof = (_c = object.eof) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
exports.FileReplicationServiceDefinition = {
    name: "FileReplicationService",
    fullName: "weaviate.v1.FileReplicationService",
    methods: {
        pauseFileActivity: {
            name: "PauseFileActivity",
            requestType: exports.PauseFileActivityRequest,
            requestStream: false,
            responseType: exports.PauseFileActivityResponse,
            responseStream: false,
            options: {},
        },
        resumeFileActivity: {
            name: "ResumeFileActivity",
            requestType: exports.ResumeFileActivityRequest,
            requestStream: false,
            responseType: exports.ResumeFileActivityResponse,
            responseStream: false,
            options: {},
        },
        listFiles: {
            name: "ListFiles",
            requestType: exports.ListFilesRequest,
            requestStream: false,
            responseType: exports.ListFilesResponse,
            responseStream: false,
            options: {},
        },
        getFileMetadata: {
            name: "GetFileMetadata",
            requestType: exports.GetFileMetadataRequest,
            requestStream: true,
            responseType: exports.FileMetadata,
            responseStream: true,
            options: {},
        },
        getFile: {
            name: "GetFile",
            requestType: exports.GetFileRequest,
            requestStream: true,
            responseType: exports.FileChunk,
            responseStream: true,
            options: {},
        },
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_js_1.default.util.Long !== long_1.default) {
    minimal_js_1.default.util.Long = long_1.default;
    minimal_js_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
